######################### Logging #############################################
#level for Evaluations report
logging.level.org.springframework.boot.autoconfigure=INFO
logging.level.org.springframework=debug
logging.level.org.hibernate=info
#This one will crank up the volume on the test context caching mechanism.
#Useful if you want to see how the test cache is handled.
#Should be to be set to trace for best results.
#Seach in the console for "Storing" or "Retrieving" to see
#where cahces are touched.
#logging.level.org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate = trace
######################## End Logging #######################################

#This will make hibernate show you the values
#it is binding to the various queries
#logging.level.org.hibernate.type=trace
#####################End Logging############################

#############TODO############################
#The properties for showing trace information
#have changed.  The TODO is to figure out
#the right combination of these properties.
#logging.level.org.hibernate=debug
#logging.level.org.hibernate.SQL=DEBUG
org.hibernate.orm.jdbc.bind=trace
org.hibernate.type.descriptor.sql=trace



#This will make hibernate show you the values
#it is binding to the various queries
#logging.level.org.hibernate.type=trace
#For Spring Boot 3 the above property is
#changed to this one.
logging.level.org.hibernate.orm.jdbc.bind=trace

################################################################

#EntityManager hack.  Only for web environments.
# 'true' will keep the Transaction open for the entire
#request, which bypasses the LazyInstantionException, but
#may leave you open to the n + 1 select issue.
# 'false' will open and close the transaction at
# whatever boundaries you define with @Transactional.
#The default is 'true'.  'false' is better.
spring.jpa.open-in-view=false

##################Profiles##########################
#spring.profiles.active=production
#This is now set in the main app on startup
#spring.profiles.active=mysql, production
spring.profiles.active=postgres, production
#spring.profiles.active=h2, production
##################End Profiles##########################

################################Hibernate DDL ###############################
#Does Hibernate generate the DDL (false for no)
#spring.jpa.generate-ddl=true
spring.jpa.generate-ddl=false
#If Hibernate, then a further switch is
# available to customize how Hibernate works
#spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.hibernate.ddl-auto=none
################################End Hibernate DDL ###############################


###########################DB properties##############################
#If spring is going to initialize the databases, this
#property specifies the name of the sql files, e.g.
#for h2 they would be schema-h2.sql and
#data.sql
spring.datasource.platform=h2
#Note that sometime after version 2.6.6 the
# above property name has been changed to:
spring.sql.init.platform=h2

#also have to turn this on for spring,
#Choices are 'embedded' (the default),
#'always' and 'never'.
#Choose 'never' if Hibernate is making the schema
spring.datasource.initialization-mode=embedded
#spring.datasource.initialization-mode=never
#Note that sometime after version 2.6.6 the
# above property name has been changed to:
spring.sql.init.mode=embedded
#spring.sql.init.mode=never

#properties to make hibernate show us what it's doing
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true
spring.jpa.properties.hibernate.format_sql=true

# Generate and log statistics
#spring.jpa.properties.hibernate.generate_statistics=true
# Log slow queries
#spring.jpa.properties.hibernate.session.events.log.LOG_QUERIES_SLOWER_THAN_MS=3

spring.jpa.properties.hibernate.type=trace 
###########################End DB properties##############################

################################Naming Strategy####################################
#You can use PhysicalNamingStrategy to tell Hibernate to map properties
#to column names directly.  E.g phoneNumber maps to a column called PHONENUMBER.
#or phoneNumber, depending on the database.
#As opposed to the SpringPhysicalNamingStrategy where phoneNumber would map to phone_number
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
#spring.jpa.hibernate.naming.physical-strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
################################End Naming Strategy####################################

#########################Actuator###########################
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
#########################End Actuator###########################


#http://localhost:8080/h2-console
spring.h2.console.enabled=true
